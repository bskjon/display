# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Dockerize Display - Backend + Frontend

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  FE_DIR: 'frontend'
  FE_ART_NAME: 'frontend'
  BE_DIR: 'backend'
  BE_ART_NAME: 'backend'

  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}

  IMAGE_NAME: 'bskjon/display'


jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use cached modules
      uses: actions/cache@v2
      with:
        path: ${{ env.FE_DIR }}/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('${{ env.FE_DIR }}/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-
    
    - name: Build frontend
      working-directory: ${{ env.FE_DIR }}
      run: |
        npm install
        npm run build
      env:
        NODE_ENV: production

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        name: ${{ env.FE_ART_NAME }}
        path: ${{ env.FE_DIR }}/build*
        if-no-files-found: error


  backend:
    runs-on: ubuntu-latest
    needs: frontend
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Downloading frontend artifact
      uses: actions/download-artifact@v3.0.1
      with:
        name: ${{ env.FE_ART_NAME }}
        path: ${{ env.BE_DIR }}/src/main/resources/static/ # download the artifact directly into the static folder

    - name: Use cached Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ${{ env.BE_DIR }}/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('${{ env.BE_DIR }}/build.gradle') }}-${{ hashFiles('${{ env.BE_DIR }}/settings.gradle') }}-${{ hashFiles('${{ env.BE_DIR }}/gradle.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1

    - name: Set executable permission on gradlew
      working-directory: ${{ env.BE_DIR }}
      run: |
        pwd
        ls
        chmod +x ./gradlew

    - name: Initialize Gradle wrapper
      working-directory: ${{ env.BE_DIR }}
      run: |
        pwd
        ls
        ./gradlew wrapper

    - name: Gradle Build
      working-directory: ${{ env.BE_DIR }}
      run: |
        pwd
        ls
        ./gradlew build
      
    - name: Upload Backend Build Artifact
      uses: actions/upload-artifact@v3.1.1
      with: 
        name: ${{ env.BE_ART_NAME }}
        path: ${{ env.BE_DIR }}/build/libs/backend.jar
        if-no-files-found: error
        

  docker:
    runs-on: ubuntu-latest
    if: ${{ always() && needs.frontend.result == 'success' && needs.backend.result == 'success' }}
    needs: [frontend, backend]

    steps:
      - name: Set tags
        id: set_tags
        run: |
          tags=()
          tags+=("${{ env.IMAGE_NAME }}:latest")
          tags+=("${{ env.IMAGE_NAME }}:${{ github.sha | short }}")
          tags+=("${{ env.IMAGE_NAME }}:$(basename ${{ github.ref }})")

          echo "::set-output name=tags::${tags[*]}"


      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Fetching docker file + extras
        uses: actions/checkout@v3
    
      - name: Downloading Backend
        uses: actions/download-artifact@v3.0.1
        with:
          name: ${{ env.BE_ART_NAME }}
          path: ./
      
      - name: Run LS
        run: |
          ls -la ./
        shell: bash
      
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.2.1
        with:
          install: true

      - name: Build and publish Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ steps.set_tags.outputs.tags }}
          dockerfile: ./Dockerfile

          
